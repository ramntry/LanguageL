Реализация интерпретатора для языка L с нестрогой семантикой выражений и
операциями инкремента и декремента (для уточнения строгости семантики
см. раздел 4.)

Модуль LanguageL.hs можно скомплировать и запустить как самостоятельное
приложение:

ghc -O2 LanguageL.hs
./LanguageL

Но им можно пользоваться и в интерактивном режиме с помощью GHCi:

ghci LanguageL.hs

<...>
Prelude Main>

Для краткости далее приглашение командной строки GHCi будем обозначать так:

>

Символом <...> будем обозначать удалённые для экономии места части
большого по длине вывода GHCi.

Приглашение Bash будем обозначать так:

$

Модуль позволяет:

1) Строить и красиво печатать выражения на языке L. Например:

-  Переменные:

> V "x"  -- V значит "Variable", в выражениях встречается очень часто,
x        -- потому имя сокращёно так сильно

> V "ho-ho"  -- Имена переменных - это произвольные строки
ho-ho

-  Целочисленные константы:

> C 10  -- C значит "Constant"
10

> C 91587018715093874107385108475014875109875108457
91587018715093874107385108475014875109875108457
  -- Это длинный целый тип, так что величина возможных
  -- значений ограничена только доступной памятью

-  Более сложные выражения, такие как инкремент и декремент:

> Inc "x"
x++

> Dec "y"
y--

Инкремент и декремент применимы только к переменным, произвольное
выражение модифицировать нельзя:

> Inc (Inc "err")

<interactive>:10:6:
    Couldn't match type `Expression' with `[Char]'
    Expected type: VarName
      Actual type: Expression
    In the return type of a call of `Inc'
    In the first argument of `Inc', namely `(Inc "err")'
    In the expression: Inc (Inc "err")

Если уже есть выражение-переменная, то можно не извлекать её имя вручную,
а воспользоваться вспомогательными функциями inc и dec:

> let x = V "x"
> dec x
x--

> let err = Inc "err"
> inc err
*** Exception: [Language L] Internal Error: Only variable can be incremented.

Ошибки с тегом "Internal Error" возникают при неправильном конструировании
выражений и программ на языке L, а также из-за ошибок реализации
интерпретатора. При возникновении ошибок в процессе вычисления семантики
выражений и программ на языке L ввиду возникновения неопределённых ситуаций
(вроде деления на ноль или чтения из пустого входного потока) сообщения
получают другие теги: "Expression Evaluation" и "Program Execution"
соответственно.


-  Бинарные операции, всего их 13: :+, :*, :-, :/, :%, :<, :>, :==, :!=,
:<=, :>=, :&&, :||

> C 2 :+ C 3
2 + 3

> V "x" :< V "y"  -- в текущем топике речь идёт о конструировании выражений
x < y             -- о их вычислении смотрите ниже

Ассоциативность и приоритеты бинарных операций друг относительно друга
имеют такие же значения, как и в Haskell. Если нужно сгруппировать
подвыражения другим способом, используйте скобки:

> C 1 :+ C 2 :+ C 3
1 + 2 + 3

> C 1 :+ (C 2 :+ C 3)
1 + (2 + 3)

> C 5 :* C 3 :+ C 4
5 * 3 + 4

> C 5 :* (C 3 :+ C 4)
5 * (3 + 4)


-  Можно конструировать выражения, которые при вычислении обязательно
приведут в неопределённое состояние:

> Inc "x" :/ C 0 :&& C 2
x++ / 0 && 2


2) Вычислять выражения при различных значениях переменных.

Семантический домен для выражений имеет следующий тип:

> :i Semantics
type Semantics = State -> (Integer, State)

Так как вычисление выражения может изменять значение переменных (с помощью
унарных операторов инкремента и декремента), семантика выражения является
функцией, вычисляющей по некоторому состоянию

значение выражения в этом состоянии и новое, возможно изменённое,
состояние. Ясно, что вычисление выражения не может расширить или сузить
область определения состояния (множество определённых переменных), но может
изменить значения переменных.

В модуле LanguageL определено пустое состяние:

> emptyState
[]

и ряд операций над состоянием. Добавить в состояние новое значение
некоторой переменной можно так:

> emptyState <-- "x" .= 10
[x = 10]

Ассоциативность и приоритеты операторов позволяют легко определять
значения сразу множества переменных:

> emptyState <-- "x" .= 10 <-- "y" .= 20 <-- "x" .= 0  -- более поздние
определения перезаписывают ранние
[x = 0, y = 20]

То же можно сделать с помощью оператора множественного определения
переменных (<==), так:

> emptyState <== ["x" .= 1, "y" .= 2, "z" .= 3]
[x = 1, y = 2, z = 3]

или так:

> emptyState <== [("x", 1), ("y", 2), ("z", 3)]
[x = 1, y = 2, z = 3]

Операторы (<--) и (<==) тоже можно смешивать:

> emptyState <== [("x", 1), ("y", 2)] <-- "z" .= 3 <== ["w" .= 4, "u" .= 5]
[u = 5, w = 4, x = 1, y = 2, z = 3]

Для удобства определена ещё одна функция-конструктор состояния:

> fromEnv [("x", 1), ("y", 2), ("z", 3)]
[x = 1, y = 2, z = 3]
  -- Env значит "Environment", обычно такое имя имеет
  -- значение типа [(VarName, Integer)]


Запросить значение переменной в состоянии можно с помощью оператора (.$):

> let s = fromEnv $ zip (map (: []) ['a'..'h']) [1..]
> s
[a = 1, b = 2, c = 3, d = 4, e = 5, f = 6, g = 7, h = 8]
> s.$ "a"
1
> s.$ "h"
8
> s.$ "x"
*** Exception: [Language L] Expression Evaluation: Variable `x' is not defined.


Вот так можно определить семантику выражения Inc "x":

> let x = "x"

> :t \s -> (s.$ x, s <-- x .= s.$ x + 1)
\s -> (s.$ x, s <-- x .= s.$ x + 1) :: State -> (Integer, State)


Вычислить сематику любого выражения можно с помощью функции sema:

> :t sema (Inc "a")
sema (Inc "a") :: Semantics

Затем семантику можно применить к какому-нибудь состоянию:

> sema (Inc "a") s
(1,[a = 2, b = 2, c = 3, d = 4, e = 5, f = 6, g = 7, h = 8])

> sema (V "a" :+ V "b") s
(3,[a = 1, b = 2, c = 3, d = 4, e = 5, f = 6, g = 7, h = 8])

> sema (V "a" :|| V "b") s
(1,[a = 1, b = 2, c = 3, d = 4, e = 5, f = 6, g = 7, h = 8])

> sema (V "a" :&& V "b") s
(*** Exception: [Language L] Expression Evaluation: Only 0 and 1 is allowed in a boolean position.

Как видно, семантика выражений нестрогая, в частности операторы конъюнкции
:&& и дизъюнкции :|| вычисляют свои аргументы только если они необходимы.
Однако если вычисление правой части логического оператора не нужно для
получения результата этого оператора, но влияет на значение
переменных, оно будет вычислено:

> eval ["x" .= 1] ((V "x" :|| Dec "x") :* V "x")
0

> eval ["x" .= 1] ((V "x" :|| Dec "y") :* V "x")
1

Также логические операторы требуют, чтобы логическое значение было равно 0
(ложь) или 1 (истина), другие значения приводят к неопределённому
состоянию. Таким образом, семантическая функция sema определена всюду, а
вот вычисляемое ею значение типа Semantics может быть применимо лишь к
части состояний (или может быть нигде неприменимо).

Так как вычисление выражений может изменять значение переменных, порядок
вычисления аргументов бинарных операторов важен. Выражения с бинарными
операторами вычисляются в соответствии с их приоритетами и
ассоциативностью, причём сначала вычисляется левый агрумент оператора,
затем правый:

> let e = Inc "x" :* Inc "x" :+ Dec "x" :+ Inc "x"
> sema e (emptyState <-- "x" .= 2)
(13,[x = 4])

> e
x++ * x++ + x-- + x++
> 2 *   3 +   4 +   3
13


Для удобства вычисления значений выражений определена ещё одна функция,
eval:

> :t eval
eval :: [(VarName, Integer)] -> Expression -> Integer

> eval [("x", 2)] (Inc "x" :* Inc "x" :+ Dec "x" :+ Inc "x")
13


3) Строить и красиво печатать программы на языке L.

В язык L входят операторы:

> Skip
skip

> "x" ::= V "y" :% C 2  -- оператор присваивания имеет вид (::=), в левой
x := y % 2              -- его части может находиться только переменная

> Read "x"  -- Прочесть из входного потока можно только переменную
read(x)

> Write (C 10 :+ C 20)
write(10 + 20)
            -- ... а записать в него значение произвольного выражения

> If (V "x" :< C 10) (Write (C 0)) (Write (C 1))
  -- три части условного оператора (условное выражение и два
  -- оператора), скорее всего, придётся обособлять скобками
if x < 10 then
  write(0)
else
  write(1)

> While (V "i" :!= C 0) ("x" ::= V "x" :* Dec "i")
  -- то же касается оператора цикла
while i != 0 do
  x := x * i--

Оператор следования (точка с запятой) имеет вид (:.), у него достаточно
низкий приоритет и правая ассоциативность, что позволяет опускать
существенную часть скобок:

> Read "a":. Read "b":. Write (V "a" :+ V "b")
read(a);
read(b);
write(a + b)


С помощью функции programOfExpression можно быстро генерировать программы,
вычисляющие значение некоторого выражения при заданном окружении (значениях
переменных):

> :t programOfExpression 
programOfExpression
  :: [(VarName, Integer)] -> Expression -> Statement

> programOfExpression ["x" .= 32] (V "x" :+ C 10)
x := 32;
write(x + 10)


При некоторой сноровке можно записывать достаточно большие программы на
языке L, например:

- Программа вычисления факториала (определена в модуле LanguageL под
именем testProgram1):

> :{
| Read "n":.
| If (V "n" :< C 0) (
|   Write (C 0))
| (
|   "x" ::= C 1:.
|   "i" ::= C 0:.
|   While (Inc "i" :< V "n") (
|     "x" ::= V "x" :* V "i"):.
|   Write (V "x"))
| :}
read(n);
if n < 0 then
  write(0)
else
  x := 1;
  i := 0;
  while i++ < n do
    x := x * i;
  write(x)


- Программа вычисления наибольшего общего делителя (определена в модуле
LanguageL под именем testProgram2):

> :{
| Read "a":.
| Read "b":.
| While (V "b" :!= C 0 :&& V "a" :!= C 0) (
|   "a" ::= V "a" :% V "b":.
|   If (V "a" :!= C 0) (
|     "b" ::= V "b" :% V "a")
|   (
|     Skip)):.
| Write (V "a" :+ V "b")
| :}
read(a);
read(b);
while b != 0 && a != 0 do
  a := a % b;
  if a != 0 then
    b := b % a
  else
    skip;
write(a + b)


- Программа вычисления первых n чисел Фибоначчи (определена под именем
testProgram3):

> :{
| Read "n":.
| "curr" ::= C 1:.
| "next" ::= C 1:.
| While (Dec "n" :!= C 0) (
|   Write (V "curr"):.
|   "tmp" ::= V "next":.
|   "next" ::= V "curr" :+ V "next":.
|   "curr" ::= V "tmp")
| :}
read(n);
curr := 1;
next := 1;
while n-- != 0 do
  write(curr);
  tmp := next;
  next := curr + next;
  curr := tmp


4) Выполнять программы и анализировать их поведение.

Можно считать, что программа на языке L исполняется на некоторой
абстрактной машине, состояние которой полностью характеризуется
конфигурацией:

> :i Configuration
type Configuration = (State, Stream, Stream)

Stream - это поток целых чисел, входной и выходной (в таком порядке):

> :i Stream
type Stream = [Integer]

Выходной поток интерпретатор хранит в инвертированном виде (голова списка
[Integer] - последний записанный в выходной поток элемент).

Каждый оператор начинает исполнение в некоторой конфигурации и переводит
абстрактную машину в некоторую другую конфигурацию, возможно,
неопределённую. В последнем случае интерпретатор остановит работу и
сообщит об ошибке.


Начальная конфигурация зависит от содержимого входного потока:

> :t initialConf
initialConf :: Stream -> Configuration

> :t initialConf [1..]
initialConf [1..] :: Configuration
  -- Haskell позволяет проинициализировать входной поток бесконечной
  -- последовательностью целых чисел

> initialConf [1, 2]
([],[1,2],[])


В модуле LanguageL.hs семантика языка L описана двумя различными способами
- с большим шагом и малым шагом.
Интерпретатор большого шага имеет тип:

> :t bigStep
bigStep :: Statement -> Configuration -> Configuration

Он позволяет одномоментно выполнить программу:

> bigStep ("x" ::= C 1:. Write (C 42)) (emptyState <-- "haha" .= -1, [5], [])
([haha = -1, x = 1],[5],[42])

> bigStep testProgram1 (initialConf [])  -- Программа вычисления факториала
*** Exception: [Language L] Program Execution: Can not read from an empty input stream.

> bigStep testProgram1 (initialConf [4])
([i = 5, n = 4, x = 24],[],[24])


Семантика программы, однако, имеет другой тип:

> :t programSema
programSema :: Statement -> Stream -> Stream

> programSema testProgram2 [12, 21]
[3]
  -- Программа вычисления наибольшего общего делителя

> programOfExpression ["x" .= 32] (V "x" :+ C 10) |> programSema $ []
[42]

Она также требует, чтобы выходной поток программы был пуст к моменту
завершения её работы:

> programSema ("x" ::= C 1:. Write (C 42)) [5]
*** Exception: [Language L] Program Execution: Program has completed with non-empty input stream.

Неопределён также выходной поток программы, пытающейся использовать
значение ранее неопределённой переменной. Потому, например, следующие две
программы не эквивалентны:

> programSema Skip []
[]

> programSema ("x" ::= V "x") []
*** Exception: [Language L] Expression Evaluation: Variable `x' is not defined.

Другой пример неопределённого результата работы программы - попытка
использовать в качестве условного выражения выражение, значение которого
отлично от 0 или 1:

> programSema (Read "x":. If (Dec "x") Skip Skip) [2]
*** Exception: [Language L] Program Execution: Only 0 and 1 is allowed in a boolean position.

Видно, что сообщение в таком случае имеет тег "Program Execution", это
верно, так как ошибки в вычислении выражения (Dec "x") здесь нет. Иначе
обстоит дело в таком примере:

> programSema (Read "x":. If (Dec "x" :|| C 1) Skip Skip) [2]
*** Exception: [Language L] Expression Evaluation: Only 0 and 1 is allowed in a boolean position.


programSema для удобства инвертирует выходной поток, порождаемый
программой на языке L, приводя его таким образом в нормальный порядок:

> programSema testProgram3 [10]
[1,1,2,3,5,8,13,21,34,55]
  -- Программа вычисления последовательности Фибоначчи

Другие функции этого инвертирования не делают.



smallStep интерпретатор позволяет выполнять программу пошагово:

> :t smallStep
smallStep :: Statement -> Configuration -> SmallStepResult

> :i SmallStepResult
data SmallStepResult
  = Completed Configuration | Uncompleted Configuration Statement

Шаг может перевести программу в завершённое состояние
(Completed Configuration), а может сконструировать вместе с новой
конфигурацией остаточное вычисление (Uncompleted Configuration Statement):

> smallStep (Write (C 0)) (initialConf [])
([],[],[0]) ==|

> smallStep (Write (C 0):. Write (C 1):. Write (C 2)) (initialConf [])
([],[],[0]) =>>
write(1);
write(2)

Для удобства в модуле LanguageL определена функция step, которая позволяет
выполнить ещё один шаг из результирующего состояния после предыдущего:

> :t step
step :: SmallStepResult -> SmallStepResult

а также функция-конструктор начального состояния такого вычисления:

> :t step0
step0 :: Statement -> Stream -> SmallStepResult

> step0 testProgram1 [2]
  -- для этой программы не было выполнено ещё ни одного шага
([],[2],[]) =>>
read(n);
if n < 0 then
  write(0)
else
  x := 1;
  i := 0;
  while i++ < n do
    x := x * i;
  write(x)


С помощью оператора (|>) можно последовательно выполнять шаги выполнения
программы:

> step0 testProgram1 [2] |> step
([n = 2],[],[]) =>>
if n < 0 then
  write(0)
else
  x := 1;
  i := 0;
  while i++ < n do
    x := x * i;
  write(x)

> step0 testProgram1 [2] |> step |> step
([n = 2],[],[]) =>>
x := 1;
i := 0;
while i++ < n do
  x := x * i;
write(x)

> step0 testProgram1 [2] |> step |> step |> step
([n = 2, x = 1],[],[]) =>>
i := 0;
while i++ < n do
  x := x * i;
write(x)


а с помощью функции stepByStep вывести полную пошаговую историю выполнения
программы:

> :t stepByStep
stepByStep :: Statement -> Stream -> ExecutionHistory

> :i ExecutionHistory
data ExecutionHistory
  = ExecutionHistory [SmallStepResult] SmallStepResult

> stepByStep (Read "a":. "b" ::= V "a":. Read "a":. Write (V "a" :+ V "b")) [10, 20]
0: ([],[10,20],[]) =>>
read(a);
b := a;
read(a);
write(a + b)

1: ([a = 10],[20],[]) =>>
b := a;
read(a);
write(a + b)

2: ([a = 10, b = 10],[20],[]) =>>
read(a);
write(a + b)

3: ([a = 20, b = 10],[],[]) =>>
write(a + b)

4: ([a = 20, b = 10],[],[30]) ==|


Возможно также вместо вывода на печать использовать ExecutionHistory
как-нибудь иначе, например, извлечь из неё завершённую конфигурацию
исполнения программы:


> configurationOfHistory (stepByStep testProgram3 [10])
([curr = 89, n = -1, next = 144, tmp = 89],[],[55,34,21,13,8,5,3,2,1,1])


5) Парсить выражения.

Соответствующую функциональность имеет функция parseExpression:

> parseExpression "(20 < 10 || x++ == y - x || z) + x++ * y + x"
(20 < 10 || x++ == y - x || z) + x++ * y + x

> eval ["x" .= 0, "y" .= 1] $ parseExpression "(20 < 10 || x++ == y - x || z) + x++ * y + x"
4


6) Компилировать программу для стековой машины.

Описание стековой машины, её динамической семантики, а также статической
семантики для компилятора языка L в код этой стековой машины см.
в документе /doc/languageL_compiler.tex

Тип Instruction реализует инструкции стековой машины:

data Instruction = E                  -- End
                 | R                  -- Read
                 | W                  -- Write
                 | I Integer          -- Const (Immediate)
                 | L VarName          -- Load
                 | S VarName          -- Store
                 | B BinaryOperator   -- BinOp
                 | J Addr             -- Jump
                 | JT Addr            -- Jump If True
                 | JF Addr            -- Jump If False

В качестве метки инструкции стековая машина использует
её порядковый номер (типа Addr).

Скомпилировать программу можно с помощью функции compileProgram:

> :t compileProgram 
compileProgram :: Statement -> SMProgram

> testProgram1 |> compileProgram 
 0:   Read
 1:   Store n
 2:   Load n
 3:   Const 0
 4:   ( < )
 5:   JumpIf0 :9
 6:   Const 0
 7:   Write
 8:   Jump :28
 9:   Const 1
<...>
25:   JumpIf1 :14
26:   Load x
27:   Write
28:   End

> programOfExpression ["x" .= 32] (V "x" :+ C 10) |> compileProgram 
0:   Const 32
1:   Store x
2:   Load x
3:   Const 10
4:   ( + )
5:   Write
6:   End

Тип SMProgram - лишь простая обёртка над списком инструкций,
введённая для удобства печати программ для стековой машины:

> :i SMProgram
newtype SMProgram = SMProgram {getInstructions :: SMInstructions}

Прогаммы для стековой машины можно писать и вручную, для исполнения в
соответствии с семантикой большого шага можно использовать функцию
machineSema:

> :t machineSema 
machineSema :: SMInstructions -> Stream -> Stream

> machineSema [E] []
[]

> machineSema [R, S "x", L "x", L "x", B Mul, W, E] [10]
[100]

> testProgram1 |> compileProgram |> getInstructions |> machineSema $ [4]
[24]

Чтобы получить семантику стековой машины по исходной программе
на языке L можно воспользоваться также функцией compiledProgramSema:

> :t compiledProgramSema 
compiledProgramSema :: Statement -> Stream -> Stream

> compiledProgramSema testProgram1 [4]
[24]


7) Комплировать программу в абстрактное представление машинного кода,
реализующего подмножество набора инструкций платформы x86-64, и выполнять
над этой формой некоторые преобразования (оптимизации).

Любой инструкции стековой машины можно поставить в соответствие
от одной до пяти инструкций x86:

> :t machineInstructionToX86 
machineInstructionToX86 :: Instruction -> [X86Instruction]

> machineInstructionToX86 (B Add)
[popq  %rcx,addq  %rcx, (%rsp)]

Генерируемый код моделирует поведение стековой машины, в частности,
в качестве стека (операндов) используется машинный стек. Визуализация
инструкций осуществляется в синтаксисе AT&T (одно из наиболее заметных
отличий от синтаксиса Intel - инвертированный порядок операндов).

Строку ассемблерного кода (с опциональной меткой) реализует тип
X86Line:

> :i X86Line
data X86Line = X86Line (Maybe X86Label) X86Instruction


> :t fromInstr 
fromInstr :: X86Instruction -> X86Line

> fromInstr (Call (Global "exit"))
        call  exit


> :t setLabel 
setLabel :: X86Label -> [X86Instruction] -> [X86Line]

> setLabel (Local 10) (machineInstructionToX86 (JT 10)) |> PrintLines
 .L10:  popq  %rax
        orq   %rax, %rax
        jnz   .L10


Транслировать программу для стековой машины в код x86 можно так:

> :t machineProgramToX86Lines 
machineProgramToX86Lines :: SMProgram -> [X86Line]

> programOfExpression [] (C 42) |> compileProgram |> machineProgramToX86Lines |> PrintLines
 main:  xorq  %rbx, %rbx
  .L0:  movq  $42, %rdi
        call  runtime_write
  .L2:  xorq  %rdi, %rdi
        call  exit

Можно заметить, что приведённый выше код не однознано соответствует
коду стековой машины:

> programOfExpression [] (C 42) |> compileProgram
0:   Const 42
1:   Write
2:   End

> programOfExpression [] (C 42) |> compileProgram |> getInstructions |> map machineInstructionToX86 |> map (map fromInstr) |> PrintBlocks
        pushq $42

        popq  %rdi
        call  runtime_write

        xorq  %rdi, %rdi
        call  exit

Это связано с тем, что функция machineProgramToX86Lines выполняет
постпроцессинг генерируемого кода с целью оптимизации, в данном примере
были удалены избыточные стековые операции:

> :t optimize 
optimize :: [X86Line] -> [X86Line]

> programOfExpression [] (C 42) |> compileProgram |> getInstructions |> concatMap  machineInstructionToX86 |> map fromInstr |> optimize |> PrintLines
  .L0:  movq  $42, %rdi
        call  runtime_write
        xorq  %rdi, %rdi
        call  exit

Также machineProgramToX86Lines добавляет в генерируемый код
точку входа (метку main) и некоторый код, необходимый для обеспечения
корректности работы части инструкций.

Ввод, вывод, запуск и останов программы требуют поддержки времени
исполнения, реализованной на языке C (см. файл runtime.c):

> machineInstructionToX86 E
[xorq  %rdi, %rdi,call  exit]

> machineInstructionToX86 R
[call  runtime_read,pushq %rax]

> machineInstructionToX86 W
[popq  %rdi,call  runtime_write]


Часть оптимизаций, например, приведённая выше, выполняются
поблочно. Разбить код на базовые блоки можно так:

> :t splitByBasicBlockBounds
splitByBasicBlockBounds :: [X86Line] -> [[X86Line]]

> manyJumpsTestCase |> PrintLines
 main:  call  runtime_read
        pushq %rax
        cmpq  $0, (%rsp)
        jl    less
        jg    greater
        jmp   after_switch
 less:  movq  $-1, (%rsp)
        jmp   after_switch
greater:
        movq  $1, (%rsp)
after_switch:
        popq  %rdi
        call  runtime_write
        xorq  %rdi, %rdi
        call  exit

> manyJumpsTestCase |> splitByBasicBlockBounds |> PrintBlocks 
 main:  call  runtime_read
        pushq %rax
        cmpq  $0, (%rsp)
        jl    less
        jmp   .L0

  .L0:  jg    greater
        jmp   after_switch

 less:  movq  $-1, (%rsp)
        jmp   after_switch

greater:
        movq  $1, (%rsp)
        jmp   after_switch

after_switch:
        popq  %rdi
        call  runtime_write
        xorq  %rdi, %rdi
        call  exit


Сгенерированные блоки на печати отделяются друг от друга пустыми строками.
При необходимости splitByBasicBlockBounds добавляет метки (.L0 в
примере). Справедливы следующие утверждения:

1) Блоки можно перемещать друг относительно друга произвольным образом,
за исключением первого - он должен оставаться первым.
2) Первая инструкция каждого блока является целью какого-нибудь
перехода (в частности, первая инструкция всегда имеет метку)
3) Последняя инструкция каждого базового блока либо безусловный переход,
либо команда завершения программы.
4) Невозможна передача управления в середину базового блока или из неё
куда-либо, за исключением того, что предпоследняя инструкция базового
блока может быть инструкцией условного перехода. Вызовы подрограмм,
возвращающие управление, могут быть в середине блока.
5) Из базового блока управление может быть передно не более, чем на два
различных блока.
6) Базовый блок может получить управление из произвольного числа
других базовых блоков, но любой базовый блок достижим из первого.

Выполнить обратное преобразование можно с помощью функции linearize:

> :t linearize 
linearize :: [[X86Line]] -> [X86Line]


Часть оптимизаций может быть выполена в пределах одной инструкции:

> :t movZeroToXorOpt 
movZeroToXorOpt :: X86Instruction -> X86Instruction

> movZeroToXorOpt (Mov (Register Rax) (Immediate 0))
xorq  %rax, %rax

Часть - для всей программы в целом, например - простейшее глобальное
распределение регистров:

> :t allocateRegistersOpt 
allocateRegistersOpt :: [X86Line] -> [X86Line]

> [R, S "a", R, S "b", B Add, W] |> concatMap machineInstructionToX86 |> map fromInstr |> PrintLines
        call  runtime_read
        pushq %rax
        popq  var_a
        call  runtime_read
        pushq %rax
        popq  var_b
        popq  %rcx
        addq  %rcx, (%rsp)
        popq  %rdi
        call  runtime_write

> [R, S "a", R, S "b", B Add, W] |> concatMap machineInstructionToX86 |> map fromInstr |> allocateRegistersOpt |> PrintLines
        call  runtime_read
        pushq %rax
        popq  %r12
        call  runtime_read
        pushq %rax
        popq  %r13
        popq  %rcx
        addq  %rcx, (%rsp)
        popq  %rdi
        call  runtime_write


8) Транслировать абстрактное представление машинного кода x86 в
программу на языке ассемблера GNU, ассемблировать её и исполнять.

Для генерации текста на языке конкретного ассемблера (GNU Assemlber)
используются типы GasInstruction, GasLine и др.:

> :i GasLine
newtype GasLine
  = GasLine (Level, Maybe X86Label, Maybe GasInstruction)

> :i GasInstruction
data GasInstruction
  = GasInstruction X86Instruction | GasDirective GasDirective

Трансляция в конкретное представление включает генерацию директив
на размещение переменных:

> :i renderGasLines 
renderGasLines :: [X86Line] -> [GasLine]

> [R, S "a", R, S "b", B Add, W] |> concatMap machineInstructionToX86 |> map fromInstr |> renderGasLines |> PrintGasLines 
.comm var_a, 8
.comm var_b, 8

        call  runtime_read
        pushq %rax
        popq  var_a
        call  runtime_read
        pushq %rax
        popq  var_b
        popq  %rcx
        addq  %rcx, (%rsp)
        popq  %rdi
        call  runtime_write

Процесс преобразования программы для стековой машины в текст на языке
конкретного ассемблера абстрагирован следующими функциями:

> :t renderGasSource 
renderGasSource :: SMProgram -> GasSource

> :t gasStringOfProgram 
gasStringOfProgram :: Statement -> String

> testProgram1 |> compileProgram |> renderGasSource 
.globl main

 main:  xorq  %rbx, %rbx
  .L0:  call  runtime_read
  .L1:  movq  %rax, %r12
  .L2:  pushq %r12
  .L3:  xorq  %rcx, %rcx
        popq  %rax
        cmpq  %rcx, %rax
        setl  %bl
  .L5:  movq  %rbx, %rax
        orq   %rax, %rax
        jz    .L9
<...>
 .L28:  xorq  %rdi, %rdi
        call  exit

Текст на языке ассемблера можно сохранить в файл:

> :t compileAndWriteGasSourceFile 
compileAndWriteGasSourceFile :: FilePath -> Statement -> IO ()

> compileAndWriteGasSourceFile "snake.s" testProgram6

$  wc snake.s 
 147  443 3258 snake.s


При условии существования актуального runtime.c в текущей директории
и доступности GCC-совместимого компилятора (по умолчанию gcc, может
быть изменено, см. объявление gasCompatibleCompiler в LanguageL.hs)
программу можно скомпилировать:

> :t compileAndWriteBinaryExecutable 
compileAndWriteBinaryExecutable :: FilePath -> Statement -> IO Bool

> compileAndWriteBinaryExecutable "list_reverse" testProgram7 
True

$ ./list_reverse 
7
2 4 6 0 0 1 0
7
0
1
0
0
6
4
2

Семантика программ при трансляции в машинное представление претерпевает
изменения: она становится строгой и исчезает контроль пустоты входного
потока на момент завершения программы. В остальном "неопределённое"
поведение стековой машины в большинстве случаев будет проявляться
аварийным завершением программы.

Весь цикл компиляции в бинарный исполняемый модуль и его запуска с
некоторыми входными данными и проверки вывода абстрагирован следующим
образом:

> :t checkBinaryProgram 
checkBinaryProgram
  :: FilePath -> Statement -> Stream -> Stream -> IO Bool

> checkBinaryProgram "snake" testProgram6 [2] [0,0, 0,1, 1,1, 1,0]
True

$ ls -lh snake
-rwxrwxr-x 8,6K  snake



Enjoy it! :)